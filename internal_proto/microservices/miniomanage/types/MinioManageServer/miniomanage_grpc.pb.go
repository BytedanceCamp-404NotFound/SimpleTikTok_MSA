// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/miniomanage.proto

package MinioManageServer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MinioManageServerClient is the client API for MinioManageServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MinioManageServerClient interface {
	// 文件上传
	PutFileUploader(ctx context.Context, in *PutFileUploaderRequest, opts ...grpc.CallOption) (*PutFileUploaderResponse, error)
	// byte形式文件上传
	PutFileUploaderByte(ctx context.Context, in *PutFileUploaderByteRequest, opts ...grpc.CallOption) (*PutFileUploaderByteponse, error)
	// 文件下载
	GetFileUploader(ctx context.Context, in *GetMinioConnectRequest, opts ...grpc.CallOption) (*GetMinioConnectResponse, error)
}

type minioManageServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMinioManageServerClient(cc grpc.ClientConnInterface) MinioManageServerClient {
	return &minioManageServerClient{cc}
}

func (c *minioManageServerClient) PutFileUploader(ctx context.Context, in *PutFileUploaderRequest, opts ...grpc.CallOption) (*PutFileUploaderResponse, error) {
	out := new(PutFileUploaderResponse)
	err := c.cc.Invoke(ctx, "/MinioManageServer.MinioManageServer/PutFileUploader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minioManageServerClient) PutFileUploaderByte(ctx context.Context, in *PutFileUploaderByteRequest, opts ...grpc.CallOption) (*PutFileUploaderByteponse, error) {
	out := new(PutFileUploaderByteponse)
	err := c.cc.Invoke(ctx, "/MinioManageServer.MinioManageServer/PutFileUploaderByte", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minioManageServerClient) GetFileUploader(ctx context.Context, in *GetMinioConnectRequest, opts ...grpc.CallOption) (*GetMinioConnectResponse, error) {
	out := new(GetMinioConnectResponse)
	err := c.cc.Invoke(ctx, "/MinioManageServer.MinioManageServer/GetFileUploader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinioManageServerServer is the server API for MinioManageServer service.
// All implementations must embed UnimplementedMinioManageServerServer
// for forward compatibility
type MinioManageServerServer interface {
	// 文件上传
	PutFileUploader(context.Context, *PutFileUploaderRequest) (*PutFileUploaderResponse, error)
	// byte形式文件上传
	PutFileUploaderByte(context.Context, *PutFileUploaderByteRequest) (*PutFileUploaderByteponse, error)
	// 文件下载
	GetFileUploader(context.Context, *GetMinioConnectRequest) (*GetMinioConnectResponse, error)
	mustEmbedUnimplementedMinioManageServerServer()
}

// UnimplementedMinioManageServerServer must be embedded to have forward compatible implementations.
type UnimplementedMinioManageServerServer struct {
}

func (UnimplementedMinioManageServerServer) PutFileUploader(context.Context, *PutFileUploaderRequest) (*PutFileUploaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutFileUploader not implemented")
}
func (UnimplementedMinioManageServerServer) PutFileUploaderByte(context.Context, *PutFileUploaderByteRequest) (*PutFileUploaderByteponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutFileUploaderByte not implemented")
}
func (UnimplementedMinioManageServerServer) GetFileUploader(context.Context, *GetMinioConnectRequest) (*GetMinioConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileUploader not implemented")
}
func (UnimplementedMinioManageServerServer) mustEmbedUnimplementedMinioManageServerServer() {}

// UnsafeMinioManageServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MinioManageServerServer will
// result in compilation errors.
type UnsafeMinioManageServerServer interface {
	mustEmbedUnimplementedMinioManageServerServer()
}

func RegisterMinioManageServerServer(s grpc.ServiceRegistrar, srv MinioManageServerServer) {
	s.RegisterService(&MinioManageServer_ServiceDesc, srv)
}

func _MinioManageServer_PutFileUploader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutFileUploaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinioManageServerServer).PutFileUploader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MinioManageServer.MinioManageServer/PutFileUploader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinioManageServerServer).PutFileUploader(ctx, req.(*PutFileUploaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinioManageServer_PutFileUploaderByte_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutFileUploaderByteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinioManageServerServer).PutFileUploaderByte(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MinioManageServer.MinioManageServer/PutFileUploaderByte",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinioManageServerServer).PutFileUploaderByte(ctx, req.(*PutFileUploaderByteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinioManageServer_GetFileUploader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMinioConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinioManageServerServer).GetFileUploader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MinioManageServer.MinioManageServer/GetFileUploader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinioManageServerServer).GetFileUploader(ctx, req.(*GetMinioConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MinioManageServer_ServiceDesc is the grpc.ServiceDesc for MinioManageServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MinioManageServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MinioManageServer.MinioManageServer",
	HandlerType: (*MinioManageServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutFileUploader",
			Handler:    _MinioManageServer_PutFileUploader_Handler,
		},
		{
			MethodName: "PutFileUploaderByte",
			Handler:    _MinioManageServer_PutFileUploaderByte_Handler,
		},
		{
			MethodName: "GetFileUploader",
			Handler:    _MinioManageServer_GetFileUploader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/miniomanage.proto",
}
