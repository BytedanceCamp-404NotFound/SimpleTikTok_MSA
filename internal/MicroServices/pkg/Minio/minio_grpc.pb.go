// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/minio.proto

package Minio

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MinioClient is the client API for Minio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MinioClient interface {
	GetMinio(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*MinioResponse, error)
}

type minioClient struct {
	cc grpc.ClientConnInterface
}

func NewMinioClient(cc grpc.ClientConnInterface) MinioClient {
	return &minioClient{cc}
}

func (c *minioClient) GetMinio(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*MinioResponse, error) {
	out := new(MinioResponse)
	err := c.cc.Invoke(ctx, "/Minio.Minio/getMinio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinioServer is the server API for Minio service.
// All implementations must embed UnimplementedMinioServer
// for forward compatibility
type MinioServer interface {
	GetMinio(context.Context, *IdRequest) (*MinioResponse, error)
	mustEmbedUnimplementedMinioServer()
}

// UnimplementedMinioServer must be embedded to have forward compatible implementations.
type UnimplementedMinioServer struct {
}

func (UnimplementedMinioServer) GetMinio(context.Context, *IdRequest) (*MinioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinio not implemented")
}
func (UnimplementedMinioServer) mustEmbedUnimplementedMinioServer() {}

// UnsafeMinioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MinioServer will
// result in compilation errors.
type UnsafeMinioServer interface {
	mustEmbedUnimplementedMinioServer()
}

func RegisterMinioServer(s grpc.ServiceRegistrar, srv MinioServer) {
	s.RegisterService(&Minio_ServiceDesc, srv)
}

func _Minio_GetMinio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinioServer).GetMinio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Minio.Minio/getMinio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinioServer).GetMinio(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Minio_ServiceDesc is the grpc.ServiceDesc for Minio service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Minio_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Minio.Minio",
	HandlerType: (*MinioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getMinio",
			Handler:    _Minio_GetMinio_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/minio.proto",
}
